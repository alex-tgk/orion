name: Dependency Security Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  pull_request:
    paths:
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/security-audit.yml'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '20'

jobs:
  security-audit:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        id: npm_audit
        continue-on-error: true
        run: |
          pnpm audit --json > audit-results.json || true

          # Parse audit results
          node -e "
          const fs = require('fs');
          const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf-8'));

          const summary = {
            total: audit.metadata?.vulnerabilities?.total || 0,
            critical: audit.metadata?.vulnerabilities?.critical || 0,
            high: audit.metadata?.vulnerabilities?.high || 0,
            moderate: audit.metadata?.vulnerabilities?.moderate || 0,
            low: audit.metadata?.vulnerabilities?.low || 0
          };

          console.log('Vulnerability Summary:', summary);

          fs.writeFileSync('audit-summary.json', JSON.stringify(summary, null, 2));

          // Set outputs
          const output = \`total=\${summary.total}
          critical=\${summary.critical}
          high=\${summary.high}
          moderate=\${summary.moderate}
          low=\${summary.low}\`;

          fs.appendFileSync(process.env.GITHUB_OUTPUT, output);
          "

      - name: Run Snyk security scan
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: Attempt automatic security fixes
        id: auto_fix
        if: steps.npm_audit.outputs.total > 0
        run: |
          # Try to fix vulnerabilities automatically
          pnpm audit --fix || true

          # Check if any changes were made
          if git diff --quiet package.json pnpm-lock.yaml; then
            echo "fixes_applied=false" >> $GITHUB_OUTPUT
            echo "No automatic fixes available"
          else
            echo "fixes_applied=true" >> $GITHUB_OUTPUT
            echo "Automatic fixes applied"
          fi

      - name: Create security report
        run: |
          node -e "
          const fs = require('fs');

          let report = '# ðŸ”’ Security Audit Report\n\n';
          report += \`**Date:** \${new Date().toISOString().split('T')[0]}\n\n\`;

          // NPM Audit Results
          if (fs.existsSync('audit-summary.json')) {
            const summary = JSON.parse(fs.readFileSync('audit-summary.json', 'utf-8'));

            report += '## NPM Audit Results\n\n';
            report += \`- **Total Vulnerabilities:** \${summary.total}\n\`;
            report += \`- ðŸ”´ **Critical:** \${summary.critical}\n\`;
            report += \`- ðŸŸ  **High:** \${summary.high}\n\`;
            report += \`- ðŸŸ¡ **Moderate:** \${summary.moderate}\n\`;
            report += \`- âšª **Low:** \${summary.low}\n\n\`;

            if (summary.total === 0) {
              report += 'âœ… No vulnerabilities detected!\n\n';
            }
          }

          // Snyk Results
          if (fs.existsSync('snyk-results.json')) {
            report += '## Snyk Scan Results\n\n';
            const snykData = JSON.parse(fs.readFileSync('snyk-results.json', 'utf-8'));

            if (snykData.vulnerabilities) {
              report += \`Found \${snykData.vulnerabilities.length} vulnerabilities\n\n\`;
            }
          }

          // Auto-fix status
          const fixesApplied = process.env.FIXES_APPLIED === 'true';
          if (fixesApplied) {
            report += '## ðŸ”§ Automatic Fixes\n\n';
            report += 'Security patches were automatically applied. Please review the changes.\n\n';
          }

          fs.writeFileSync('security-report.md', report);
          "
        env:
          FIXES_APPLIED: ${{ steps.auto_fix.outputs.fixes_applied }}

      - name: Create PR for security fixes
        if: steps.auto_fix.outputs.fixes_applied == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(security): apply automatic security patches'
          title: 'ðŸ”’ Security: Automatic vulnerability fixes'
          body: |
            ## Automatic Security Patches

            This PR contains automatic security fixes applied by `pnpm audit --fix`.

            ### Vulnerabilities Fixed
            - Critical: ${{ steps.npm_audit.outputs.critical }}
            - High: ${{ steps.npm_audit.outputs.high }}
            - Moderate: ${{ steps.npm_audit.outputs.moderate }}
            - Low: ${{ steps.npm_audit.outputs.low }}

            ### Review Checklist
            - [ ] Verify all tests pass
            - [ ] Check for breaking changes
            - [ ] Review updated dependencies
            - [ ] Test critical functionality

            ### Next Steps
            1. Review the changes carefully
            2. Run full test suite
            3. Merge if all checks pass

            ---
            *This PR was automatically created by the security-audit workflow*
          branch: security/auto-fix-${{ github.run_number }}
          delete-branch: true
          labels: |
            security
            dependencies
            automated

      - name: Create issues for critical vulnerabilities
        if: steps.npm_audit.outputs.critical > 0 || steps.npm_audit.outputs.high > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('audit-summary.json', 'utf-8'));

            if (summary.critical > 0 || summary.high > 0) {
              const title = `ðŸš¨ Critical Security Vulnerabilities Detected`;
              const body = `## Security Alert

              **Critical Vulnerabilities:** ${summary.critical}
              **High Severity:** ${summary.high}

              ### Action Required

              Critical or high severity vulnerabilities have been detected in dependencies.

              ### Details
              - Total vulnerabilities: ${summary.total}
              - Critical: ${summary.critical}
              - High: ${summary.high}
              - Moderate: ${summary.moderate}
              - Low: ${summary.low}

              ### Immediate Actions
              1. Review the security audit report
              2. Update affected dependencies
              3. Test for breaking changes
              4. Deploy fixes as soon as possible

              ### Commands to Run
              \`\`\`bash
              pnpm audit
              pnpm audit --fix
              pnpm test
              \`\`\`

              ---
              *This issue was automatically created by the security-audit workflow*
              `;

              // Check if a similar issue already exists
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'security,critical'
              });

              const existingIssue = issues.data.find(issue =>
                issue.title.includes('Critical Security Vulnerabilities')
              );

              if (existingIssue) {
                // Update existing issue
                await github.rest.issues.createComment({
                  issue_number: existingIssue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `### Updated Security Scan Results\n\n${body}`
                });
              } else {
                // Create new issue
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'critical', 'dependencies']
                });
              }
            }

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            audit-results.json
            audit-summary.json
            snyk-results.json
            security-report.md
          retention-days: 90

      - name: Upload to GitHub Security
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0
