# AlertManager Configuration for ORION Platform
# Manages alert routing, grouping, and notifications

global:
  # Default SMTP configuration
  smtp_smarthost: '${SMTP_HOST:-smtp.gmail.com}:587'
  smtp_from: '${ALERT_EMAIL_FROM:-alerts@orion.dev}'
  smtp_auth_username: '${SMTP_USERNAME:-}'
  smtp_auth_password: '${SMTP_PASSWORD:-}'
  smtp_require_tls: true

  # Slack webhook URL (will be set via environment variable)
  slack_api_url: '${SLACK_WEBHOOK_URL:-}'

  # PagerDuty integration key
  pagerduty_url: 'https://events.pagerduty.com/v2/enqueue'

  # Default timeout values
  resolve_timeout: 5m

# Templates for notifications
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Route configuration
route:
  # Default receiver if no route matches
  receiver: 'default'

  # Group alerts by these labels
  group_by: ['alertname', 'cluster', 'service']

  # How long to wait before sending initial notification
  group_wait: 30s

  # How long to wait before sending notification about new alerts added to group
  group_interval: 5m

  # How long to wait before re-sending notification
  repeat_interval: 4h

  # Child routes
  routes:
    # Critical alerts go to PagerDuty and Slack
    - match:
        severity: critical
      receiver: 'pagerduty-critical'
      continue: true
      routes:
        - match:
            team: platform
          receiver: 'slack-platform-critical'
        - match:
            team: database
          receiver: 'slack-database-critical'
        - match:
            team: security
          receiver: 'slack-security-critical'

    # Warning alerts go to Slack
    - match:
        severity: warning
      receiver: 'slack-warnings'
      routes:
        - match:
            team: platform
          receiver: 'slack-platform-warnings'
        - match:
            team: database
          receiver: 'slack-database-warnings'
        - match:
            team: messaging
          receiver: 'slack-messaging-warnings'

    # Info alerts go to email
    - match:
        severity: info
      receiver: 'email-info'

    # Security alerts always go to security team
    - match:
        team: security
      receiver: 'security-team'
      group_wait: 10s
      group_interval: 2m

    # Database alerts
    - match:
        team: database
      receiver: 'database-team'
      group_by: ['alertname', 'instance']

    # Business metrics alerts
    - match:
        team: product
      receiver: 'product-team'
      repeat_interval: 12h

# Receivers configuration
receivers:
  # Default receiver - sends to general ops channel
  - name: 'default'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#orion-alerts'
        title: 'ORION Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'warning'

  # PagerDuty for critical alerts
  - name: 'pagerduty-critical'
    pagerduty_configs:
      - service_key: '${PAGERDUTY_SERVICE_KEY:-}'
        description: '{{ .GroupLabels.alertname }}: {{ .GroupLabels.service }}'
        severity: 'critical'
        details:
          firing: '{{ .Alerts.Firing | len }}'
          resolved: '{{ .Alerts.Resolved | len }}'
          num_alerts: '{{ .Alerts | len }}'

  # Slack channels for different teams
  - name: 'slack-platform-critical'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#platform-critical'
        title: 'Critical Platform Alert'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Labels.alertname }}
          *Service:* {{ .Labels.service }}
          *Severity:* {{ .Labels.severity }}
          *Description:* {{ .Annotations.description }}
          *Runbook:* {{ .Annotations.runbook_url }}
          {{ end }}
        color: 'danger'
        send_resolved: true

  - name: 'slack-database-critical'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#database-alerts'
        title: 'Critical Database Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'danger'

  - name: 'slack-security-critical'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#security-alerts'
        title: 'Critical Security Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'danger'

  - name: 'slack-warnings'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#orion-warnings'
        title: 'ORION Warning'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'warning'

  - name: 'slack-platform-warnings'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#platform-warnings'
        title: 'Platform Warning'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'warning'

  - name: 'slack-database-warnings'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#database-alerts'
        title: 'Database Warning'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'warning'

  - name: 'slack-messaging-warnings'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#messaging-alerts'
        title: 'Messaging Warning'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'warning'

  # Email receivers
  - name: 'email-info'
    email_configs:
      - to: '${ALERT_EMAIL_TO:-ops@orion.dev}'
        headers:
          Subject: '[ORION] Info Alert: {{ .GroupLabels.alertname }}'
        html: |
          <h2>ORION Alert</h2>
          {{ range .Alerts }}
          <p><strong>Alert:</strong> {{ .Labels.alertname }}</p>
          <p><strong>Service:</strong> {{ .Labels.service }}</p>
          <p><strong>Description:</strong> {{ .Annotations.description }}</p>
          <p><strong>Time:</strong> {{ .StartsAt }}</p>
          {{ end }}

  - name: 'security-team'
    email_configs:
      - to: '${SECURITY_EMAIL:-security@orion.dev}'
        headers:
          Subject: '[SECURITY] {{ .GroupLabels.alertname }}'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL:-}'
        channel: '#security-alerts'
        title: 'Security Alert'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'danger'

  - name: 'database-team'
    email_configs:
      - to: '${DATABASE_EMAIL:-database@orion.dev}'
        headers:
          Subject: '[DATABASE] {{ .GroupLabels.alertname }}'

  - name: 'product-team'
    email_configs:
      - to: '${PRODUCT_EMAIL:-product@orion.dev}'
        headers:
          Subject: '[PRODUCT] {{ .GroupLabels.alertname }}'

# Inhibition rules - suppress certain alerts when others are firing
inhibit_rules:
  # If service is down, suppress all other alerts from that service
  - source_match:
      alertname: 'ServiceDown'
    target_match_re:
      service: '.*'
    equal: ['service', 'instance']

  # If database is down, suppress database-related alerts
  - source_match:
      alertname: 'PostgresDown'
    target_match_re:
      alertname: '(HighDatabaseConnections|DatabaseReplicationLag|SlowDatabaseQueries)'

  # If Redis is down, suppress cache-related alerts
  - source_match:
      alertname: 'RedisDown'
    target_match_re:
      alertname: '(LowCacheHitRate|HighRedisMemoryUsage)'

  # If RabbitMQ is down, suppress queue-related alerts
  - source_match:
      alertname: 'RabbitMQDown'
    target_match_re:
      alertname: '(HighQueueDepth|MessageQueueProcessingStalled)'

  # Suppress warnings if critical alert is firing for same service
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['service', 'alertname']

# Time intervals for muting alerts (useful for maintenance windows)
time_intervals:
  - name: 'business-hours'
    time_intervals:
      - times:
          - start_time: '09:00'
            end_time: '17:00'
        weekdays: ['monday:friday']

  - name: 'outside-business-hours'
    time_intervals:
      - times:
          - start_time: '17:00'
            end_time: '09:00'
        weekdays: ['monday:friday']
      - weekdays: ['saturday', 'sunday']

  - name: 'weekends'
    time_intervals:
      - weekdays: ['saturday', 'sunday']
