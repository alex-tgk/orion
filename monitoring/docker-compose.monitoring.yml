# Docker Compose for ORION Monitoring Stack
# Complete observability solution with metrics, logs, and traces

version: '3.8'

services:
  # Prometheus - Metrics Collection and Storage
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: orion-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - orion-network
      - monitoring
    depends_on:
      - alertmanager

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: orion-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./alertmanager/templates:/etc/alertmanager/templates:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    environment:
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
      - PAGERDUTY_SERVICE_KEY=${PAGERDUTY_SERVICE_KEY:-}
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}

  # Grafana - Visualization and Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: orion-grafana
    restart: unless-stopped
    ports:
      - "3100:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/etc/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
      - orion-network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3100
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    depends_on:
      - prometheus
      - loki
      - tempo

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.3
    container_name: orion-loki
    restart: unless-stopped
    ports:
      - "3101:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring
    command: -config.file=/etc/loki/local-config.yaml

  # Promtail - Log Collector for Loki
  promtail:
    image: grafana/promtail:2.9.3
    container_name: orion-promtail
    restart: unless-stopped
    volumes:
      - ./loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:2.3.1
    container_name: orion-tempo
    restart: unless-stopped
    command: ["-config.file=/etc/tempo/tempo.yml"]
    ports:
      - "3102:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "9411:9411"   # Zipkin
      - "14268:14268" # Jaeger ingest
    volumes:
      - ./tempo/tempo.yml:/etc/tempo/tempo.yml:ro
      - tempo_data:/tmp/tempo
    networks:
      - monitoring
      - orion-network

  # Jaeger - Alternative Tracing Backend
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: orion-jaeger
    restart: unless-stopped
    ports:
      - "5775:5775/udp"   # Accept zipkin.thrift over compact thrift protocol
      - "6831:6831/udp"   # Accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"   # Accept jaeger.thrift over binary thrift protocol
      - "5778:5778"       # Serve configs
      - "16686:16686"     # Serve frontend
      - "14250:14250"     # Accept model.proto
      - "14269:14269"     # Admin port: health check at / and metrics at /metrics
    networks:
      - monitoring
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true

  # Elasticsearch - Log Storage (Alternative to Loki)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: orion-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    profiles:
      - elastic

  # Fluentd - Log Collection and Forwarding
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: orion-fluentd
    restart: unless-stopped
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd_data:/fluentd/log
    networks:
      - monitoring
      - orion-network
    depends_on:
      - elasticsearch
    profiles:
      - elastic

  # Postgres Exporter - Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: orion-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - orion-network
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER:-orion}:${DB_PASSWORD:-orion_dev}@postgres:5432/${DB_NAME:-orion_dev}?sslmode=disable
      - PG_EXPORTER_AUTO_DISCOVER_DATABASES=true
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres-exporter/queries.yaml
    volumes:
      - ./prometheus/exporters/postgres-queries.yaml:/etc/postgres-exporter/queries.yaml:ro

  # Redis Exporter - Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: orion-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    networks:
      - monitoring
      - orion-network
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}

  # RabbitMQ Exporter - Message Queue Metrics
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:v1.0.0-RC19
    container_name: orion-rabbitmq-exporter
    restart: unless-stopped
    ports:
      - "9419:9419"
    networks:
      - monitoring
      - orion-network
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=${RABBITMQ_USER:-orion}
      - RABBIT_PASSWORD=${RABBITMQ_PASSWORD:-orion_dev}
      - PUBLISH_PORT=9419

  # Node Exporter - Host Metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: orion-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitoring
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: orion-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg

  # Blackbox Exporter - Synthetic Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: orion-blackbox-exporter
    restart: unless-stopped
    ports:
      - "9115:9115"
    networks:
      - monitoring
      - orion-network
    volumes:
      - ./blackbox-exporter/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'

  # OpenTelemetry Collector - Trace and Metrics Collection
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    container_name: orion-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4315:4317"   # OTLP gRPC receiver
      - "4316:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check extension
    volumes:
      - ./tempo/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    networks:
      - monitoring
      - orion-network
    depends_on:
      - tempo
      - prometheus

networks:
  monitoring:
    driver: bridge
    name: orion-monitoring
  orion-network:
    external: true
    name: orion-network

volumes:
  prometheus_data:
    driver: local
  alertmanager_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local
  elasticsearch_data:
    driver: local
  fluentd_data:
    driver: local
