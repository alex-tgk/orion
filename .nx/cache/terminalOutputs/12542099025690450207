[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m feature-flags [39m[27m[0m [2mpackages/feature-flags/src/__tests__/[22m[1mflag-evaluation.service.spec.ts[22m
  FlagEvaluationService
    evaluate - basic flags
      [32m✓[39m [2mshould return disabled if flag is globally disabled (13 ms)[22m
      [32m✓[39m [2mshould return enabled for 100% rollout (2 ms)[22m
      [32m✓[39m [2mshould return disabled for 0% rollout (2 ms)[22m
    evaluate - targeting
      [32m✓[39m [2mshould match user target (2 ms)[22m
      [32m✓[39m [2mshould match role target (1 ms)[22m
      [32m✓[39m [2mshould match email target (1 ms)[22m
      [32m✓[39m [2mshould respect target priority (1 ms)[22m
    evaluate - multivariate
      [32m✓[39m [2mshould return a variant for multivariate flag (1 ms)[22m
      [32m✓[39m [2mshould consistently assign same variant to same user (2 ms)[22m
    evaluate - rollout percentage
      [32m✓[39m [2mshould use consistent hashing for rollout (1 ms)[22m
      [32m✓[39m [2mshould distribute users across rollout percentage (2 ms)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m feature-flags [39m[27m[0m [2mpackages/feature-flags/src/__tests__/[22m[1mfeature-flags.controller.spec.ts[22m
  [1m● [22mTest suite failed to run

    [1m[31mJest encountered an unexpected token[39m[22m

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see [4mhttps://jestjs.io/docs/ecmascript-modules[24m for how to enable it.
     • If you are trying to use TypeScript, see [4mhttps://jestjs.io/docs/getting-started#using-typescript[24m
     • To have some of your "node_modules" files transformed, you can specify a custom [1m"transformIgnorePatterns"[22m in your config.
     • If you need a custom transformation, specify a [1m"transform"[22m option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the [1m"moduleNameMapper"[22m config option.

    You'll find more details and examples of these config options in the docs:
    [36mhttps://jestjs.io/docs/configuration[39m
    For information about custom transformations, see:
    [36mhttps://jestjs.io/docs/code-transformation[39m

    [1m[31mDetails:[39m[22m

    /Users/acarroll/dev/projects/orion/node_modules/.pnpm/uuid@13.0.0/node_modules/uuid/dist-node/index.js:1
    export { default as MAX } from './max.js';
    ^^^^^^

    SyntaxError: Unexpected token 'export'

    [0m [90m 1 |[39m [36mimport[39m { [33mInjectable[39m[33m,[39m [33mNestMiddleware[39m } [36mfrom[39m [32m'@nestjs/common'[39m[33m;[39m
     [90m 2 |[39m [36mimport[39m { [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mNextFunction[39m } [36mfrom[39m [32m'express'[39m[33m;[39m
    [31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { v4 [36mas[39m uuidv4 } [36mfrom[39m [32m'uuid'[39m[33m;[39m
     [90m   |[39m [31m[1m^[22m[39m
     [90m 4 |[39m [90m// TODO: Import LoggerService when logger package is available[39m
     [90m 5 |[39m [90m// import { LoggerService } from '@orion/logger';[39m
     [90m 6 |[39m[0m

      [2mat Runtime.createScriptFromCode ([22m../../node_modules/.pnpm/jest-runtime@30.2.0/node_modules/jest-runtime/build/index.js[2m:1318:40)[22m
      [2mat Object.<anonymous> ([22m../shared/src/middleware/correlation-id.middleware.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m../shared/src/index.ts[2m:12:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/services/feature-flags.service.ts[2m:2:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/controllers/feature-flags.controller.ts[2m:17:1)[22m
      [2mat Object.<anonymous> ([22m[0m[36msrc/__tests__/feature-flags.controller.spec.ts[39m[0m[2m:2:1)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m feature-flags [39m[27m[0m [2mpackages/feature-flags/src/__tests__/[22m[1mfeature-flags.service.spec.ts[22m
  [1m● [22mTest suite failed to run

    [1m[31mJest encountered an unexpected token[39m[22m

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     • If you are trying to use ECMAScript Modules, see [4mhttps://jestjs.io/docs/ecmascript-modules[24m for how to enable it.
     • If you are trying to use TypeScript, see [4mhttps://jestjs.io/docs/getting-started#using-typescript[24m
     • To have some of your "node_modules" files transformed, you can specify a custom [1m"transformIgnorePatterns"[22m in your config.
     • If you need a custom transformation, specify a [1m"transform"[22m option in your config.
     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the [1m"moduleNameMapper"[22m config option.

    You'll find more details and examples of these config options in the docs:
    [36mhttps://jestjs.io/docs/configuration[39m
    For information about custom transformations, see:
    [36mhttps://jestjs.io/docs/code-transformation[39m

    [1m[31mDetails:[39m[22m

    /Users/acarroll/dev/projects/orion/node_modules/.pnpm/uuid@13.0.0/node_modules/uuid/dist-node/index.js:1
    export { default as MAX } from './max.js';
    ^^^^^^

    SyntaxError: Unexpected token 'export'

    [0m [90m 1 |[39m [36mimport[39m { [33mInjectable[39m[33m,[39m [33mNestMiddleware[39m } [36mfrom[39m [32m'@nestjs/common'[39m[33m;[39m
     [90m 2 |[39m [36mimport[39m { [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mNextFunction[39m } [36mfrom[39m [32m'express'[39m[33m;[39m
    [31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { v4 [36mas[39m uuidv4 } [36mfrom[39m [32m'uuid'[39m[33m;[39m
     [90m   |[39m [31m[1m^[22m[39m
     [90m 4 |[39m [90m// TODO: Import LoggerService when logger package is available[39m
     [90m 5 |[39m [90m// import { LoggerService } from '@orion/logger';[39m
     [90m 6 |[39m[0m

      [2mat Runtime.createScriptFromCode ([22m../../node_modules/.pnpm/jest-runtime@30.2.0/node_modules/jest-runtime/build/index.js[2m:1318:40)[22m
      [2mat Object.<anonymous> ([22m../shared/src/middleware/correlation-id.middleware.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m../shared/src/index.ts[2m:12:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/services/feature-flags.service.ts[2m:2:1)[22m
      [2mat Object.<anonymous> ([22m[0m[36msrc/__tests__/feature-flags.service.spec.ts[39m[0m[2m:2:1)[22m

[1mTest Suites: [22m[1m[31m2 failed[39m[22m, [1m[32m1 passed[39m[22m, 3 total
[1mTests:       [22m[1m[32m11 passed[39m[22m, 11 total
[1mSnapshots:   [22m0 total
[1mTime:[22m        3.025 s
[2mRan all test suites[22m[2m.[22m
