[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/services/[22m[1mhash.service.spec.ts[22m
  HashService
    hash
      [32m‚úì[39m [2mshould be defined (18 ms)[22m
      [32m‚úì[39m [2mshould hash a password using bcrypt with 12 salt rounds (5 ms)[22m
      [32m‚úì[39m [2mshould handle different password inputs (2 ms)[22m
      [32m‚úì[39m [2mshould propagate bcrypt errors (11 ms)[22m
    compare
      [32m‚úì[39m [2mshould be defined (2 ms)[22m
      [32m‚úì[39m [2mshould return true when password matches hash (2 ms)[22m
      [32m‚úì[39m [2mshould return false when password does not match hash (2 ms)[22m
      [32m‚úì[39m [2mshould handle empty password (2 ms)[22m
      [32m‚úì[39m [2mshould handle case sensitivity correctly (2 ms)[22m
      [32m‚úì[39m [2mshould propagate bcrypt errors (2 ms)[22m
      [32m‚úì[39m [2mshould handle invalid hash format gracefully (2 ms)[22m
    integration scenarios
      [32m‚úì[39m [2mshould handle rapid successive hashing requests (1 ms)[22m
      [32m‚úì[39m [2mshould handle rapid successive comparison requests (2 ms)[22m

[0m[7m[1m[32m PASS [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/services/[22m[1msession.service.spec.ts[22m
  SessionService
    initialization
      [32m‚úì[39m [2mshould be defined (18 ms)[22m
      [32m‚úì[39m [2mshould initialize Redis with correct configuration (3 ms)[22m
      [32m‚úì[39m [2mshould log success message on Redis connection (5 ms)[22m
    createSession
      [32m‚úì[39m [2mshould create a session in Redis with correct TTL (4 ms)[22m
      [32m‚úì[39m [2mshould handle session creation with minimal metadata (3 ms)[22m
      [32m‚úì[39m [2mshould handle Redis errors gracefully (2 ms)[22m
      [32m‚úì[39m [2mshould warn when Redis is unavailable (3 ms)[22m
    getSession
      [32m‚úì[39m [2mshould retrieve a session from Redis (3 ms)[22m
      [32m‚úì[39m [2mshould return null when session does not exist (2 ms)[22m
      [32m‚úì[39m [2mshould handle JSON parsing errors (3 ms)[22m
      [32m‚úì[39m [2mshould handle Redis errors (2 ms)[22m
      [32m‚úì[39m [2mshould return null when Redis is unavailable (2 ms)[22m
    deleteSession
      [32m‚úì[39m [2mshould delete a session from Redis (2 ms)[22m
      [32m‚úì[39m [2mshould handle deletion of non-existent session (2 ms)[22m
      [32m‚úì[39m [2mshould handle Redis errors during deletion (1 ms)[22m
      [32m‚úì[39m [2mshould warn when Redis is unavailable (2 ms)[22m
    blacklistToken
      [32m‚úì[39m [2mshould blacklist a token with correct expiration (3 ms)[22m
      [32m‚úì[39m [2mshould handle blacklisting with different expiration times (2 ms)[22m
      [32m‚úì[39m [2mshould handle Redis errors during blacklisting (1 ms)[22m
      [32m‚úì[39m [2mshould warn when Redis is unavailable (2 ms)[22m
    isTokenBlacklisted
      [32m‚úì[39m [2mshould return true when token is blacklisted (2 ms)[22m
      [32m‚úì[39m [2mshould return false when token is not blacklisted (1 ms)[22m
      [32m‚úì[39m [2mshould handle Redis errors (2 ms)[22m
      [32m‚úì[39m [2mshould return false when Redis is unavailable (3 ms)[22m
    getRedisStatus
      [32m‚úì[39m [2mshould return "connected" when Redis is available (1 ms)[22m
      [32m‚úì[39m [2mshould return "disconnected" when Redis is unavailable (2 ms)[22m
    graceful degradation
      [32m‚úì[39m [2mshould not throw errors when Redis operations fail (2 ms)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/services/[22m[1mhealth.service.spec.ts[22m
  [1m‚óè [22mTest suite failed to run

    [1m[31mJest encountered an unexpected token[39m[22m

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see [4mhttps://jestjs.io/docs/ecmascript-modules[24m for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see [4mhttps://jestjs.io/docs/getting-started#using-typescript[24m
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom [1m"transformIgnorePatterns"[22m in your config.
     ‚Ä¢ If you need a custom transformation, specify a [1m"transform"[22m option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the [1m"moduleNameMapper"[22m config option.

    You'll find more details and examples of these config options in the docs:
    [36mhttps://jestjs.io/docs/configuration[39m
    For information about custom transformations, see:
    [36mhttps://jestjs.io/docs/code-transformation[39m

    [1m[31mDetails:[39m[22m

    /Users/acarroll/dev/projects/orion/node_modules/.pnpm/uuid@13.0.0/node_modules/uuid/dist-node/index.js:1
    export { default as MAX } from './max.js';
    ^^^^^^

    SyntaxError: Unexpected token 'export'

    [0m [90m 1 |[39m [36mimport[39m { [33mInjectable[39m[33m,[39m [33mNestMiddleware[39m } [36mfrom[39m [32m'@nestjs/common'[39m[33m;[39m
     [90m 2 |[39m [36mimport[39m { [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mNextFunction[39m } [36mfrom[39m [32m'express'[39m[33m;[39m
    [31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { v4 [36mas[39m uuidv4 } [36mfrom[39m [32m'uuid'[39m[33m;[39m
     [90m   |[39m [31m[1m^[22m[39m
     [90m 4 |[39m [90m// TODO: Import LoggerService when logger package is available[39m
     [90m 5 |[39m [90m// import { LoggerService } from '@orion/logger';[39m
     [90m 6 |[39m[0m

      [2mat Runtime.createScriptFromCode ([22m../../node_modules/.pnpm/jest-runtime@30.2.0/node_modules/jest-runtime/build/index.js[2m:1318:40)[22m
      [2mat Object.<anonymous> ([22m../shared/src/middleware/correlation-id.middleware.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m../shared/src/index.ts[2m:12:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/services/health.service.ts[2m:2:1)[22m
      [2mat Object.<anonymous> ([22m[0m[36msrc/app/services/health.service.spec.ts[39m[0m[2m:2:1)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/strategies/[22m[1mjwt.strategy.spec.ts[22m
  [1m‚óè [22mTest suite failed to run

    [1m[31mJest encountered an unexpected token[39m[22m

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see [4mhttps://jestjs.io/docs/ecmascript-modules[24m for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see [4mhttps://jestjs.io/docs/getting-started#using-typescript[24m
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom [1m"transformIgnorePatterns"[22m in your config.
     ‚Ä¢ If you need a custom transformation, specify a [1m"transform"[22m option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the [1m"moduleNameMapper"[22m config option.

    You'll find more details and examples of these config options in the docs:
    [36mhttps://jestjs.io/docs/configuration[39m
    For information about custom transformations, see:
    [36mhttps://jestjs.io/docs/code-transformation[39m

    [1m[31mDetails:[39m[22m

    /Users/acarroll/dev/projects/orion/node_modules/.pnpm/uuid@13.0.0/node_modules/uuid/dist-node/index.js:1
    export { default as MAX } from './max.js';
    ^^^^^^

    SyntaxError: Unexpected token 'export'

    [0m [90m 1 |[39m [36mimport[39m { [33mInjectable[39m[33m,[39m [33mNestMiddleware[39m } [36mfrom[39m [32m'@nestjs/common'[39m[33m;[39m
     [90m 2 |[39m [36mimport[39m { [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mNextFunction[39m } [36mfrom[39m [32m'express'[39m[33m;[39m
    [31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { v4 [36mas[39m uuidv4 } [36mfrom[39m [32m'uuid'[39m[33m;[39m
     [90m   |[39m [31m[1m^[22m[39m
     [90m 4 |[39m [90m// TODO: Import LoggerService when logger package is available[39m
     [90m 5 |[39m [90m// import { LoggerService } from '@orion/logger';[39m
     [90m 6 |[39m[0m

      [2mat Runtime.createScriptFromCode ([22m../../node_modules/.pnpm/jest-runtime@30.2.0/node_modules/jest-runtime/build/index.js[2m:1318:40)[22m
      [2mat Object.<anonymous> ([22m../shared/src/middleware/correlation-id.middleware.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m../shared/src/index.ts[2m:12:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/strategies/jwt.strategy.ts[2m:4:1)[22m
      [2mat Object.<anonymous> ([22m[0m[36msrc/app/strategies/jwt.strategy.spec.ts[39m[0m[2m:3:1)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/services/[22m[1mauth.service.spec.ts[22m
  [1m‚óè [22mTest suite failed to run

    [1m[31mJest encountered an unexpected token[39m[22m

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see [4mhttps://jestjs.io/docs/ecmascript-modules[24m for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see [4mhttps://jestjs.io/docs/getting-started#using-typescript[24m
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom [1m"transformIgnorePatterns"[22m in your config.
     ‚Ä¢ If you need a custom transformation, specify a [1m"transform"[22m option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the [1m"moduleNameMapper"[22m config option.

    You'll find more details and examples of these config options in the docs:
    [36mhttps://jestjs.io/docs/configuration[39m
    For information about custom transformations, see:
    [36mhttps://jestjs.io/docs/code-transformation[39m

    [1m[31mDetails:[39m[22m

    /Users/acarroll/dev/projects/orion/node_modules/.pnpm/uuid@13.0.0/node_modules/uuid/dist-node/index.js:1
    export { default as MAX } from './max.js';
    ^^^^^^

    SyntaxError: Unexpected token 'export'

    [0m [90m 1 |[39m [36mimport[39m { [33mInjectable[39m[33m,[39m [33mNestMiddleware[39m } [36mfrom[39m [32m'@nestjs/common'[39m[33m;[39m
     [90m 2 |[39m [36mimport[39m { [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mNextFunction[39m } [36mfrom[39m [32m'express'[39m[33m;[39m
    [31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { v4 [36mas[39m uuidv4 } [36mfrom[39m [32m'uuid'[39m[33m;[39m
     [90m   |[39m [31m[1m^[22m[39m
     [90m 4 |[39m [90m// TODO: Import LoggerService when logger package is available[39m
     [90m 5 |[39m [90m// import { LoggerService } from '@orion/logger';[39m
     [90m 6 |[39m[0m

      [2mat Runtime.createScriptFromCode ([22m../../node_modules/.pnpm/jest-runtime@30.2.0/node_modules/jest-runtime/build/index.js[2m:1318:40)[22m
      [2mat Object.<anonymous> ([22m../shared/src/middleware/correlation-id.middleware.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m../shared/src/index.ts[2m:12:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/services/auth.service.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m[0m[36msrc/app/services/auth.service.spec.ts[39m[0m[2m:4:1)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/[22m[1mauth.controller.spec.ts[22m
  [1m‚óè [22mTest suite failed to run

    [1m[31mJest encountered an unexpected token[39m[22m

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ‚Ä¢ If you are trying to use ECMAScript Modules, see [4mhttps://jestjs.io/docs/ecmascript-modules[24m for how to enable it.
     ‚Ä¢ If you are trying to use TypeScript, see [4mhttps://jestjs.io/docs/getting-started#using-typescript[24m
     ‚Ä¢ To have some of your "node_modules" files transformed, you can specify a custom [1m"transformIgnorePatterns"[22m in your config.
     ‚Ä¢ If you need a custom transformation, specify a [1m"transform"[22m option in your config.
     ‚Ä¢ If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the [1m"moduleNameMapper"[22m config option.

    You'll find more details and examples of these config options in the docs:
    [36mhttps://jestjs.io/docs/configuration[39m
    For information about custom transformations, see:
    [36mhttps://jestjs.io/docs/code-transformation[39m

    [1m[31mDetails:[39m[22m

    /Users/acarroll/dev/projects/orion/node_modules/.pnpm/uuid@13.0.0/node_modules/uuid/dist-node/index.js:1
    export { default as MAX } from './max.js';
    ^^^^^^

    SyntaxError: Unexpected token 'export'

    [0m [90m 1 |[39m [36mimport[39m { [33mInjectable[39m[33m,[39m [33mNestMiddleware[39m } [36mfrom[39m [32m'@nestjs/common'[39m[33m;[39m
     [90m 2 |[39m [36mimport[39m { [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mNextFunction[39m } [36mfrom[39m [32m'express'[39m[33m;[39m
    [31m[1m>[22m[39m[90m 3 |[39m [36mimport[39m { v4 [36mas[39m uuidv4 } [36mfrom[39m [32m'uuid'[39m[33m;[39m
     [90m   |[39m [31m[1m^[22m[39m
     [90m 4 |[39m [90m// TODO: Import LoggerService when logger package is available[39m
     [90m 5 |[39m [90m// import { LoggerService } from '@orion/logger';[39m
     [90m 6 |[39m[0m

      [2mat Runtime.createScriptFromCode ([22m../../node_modules/.pnpm/jest-runtime@30.2.0/node_modules/jest-runtime/build/index.js[2m:1318:40)[22m
      [2mat Object.<anonymous> ([22m../shared/src/middleware/correlation-id.middleware.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22m../shared/src/index.ts[2m:12:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/services/auth.service.ts[2m:3:1)[22m
      [2mat Object.<anonymous> ([22msrc/app/auth.controller.ts[2m:22:1)[22m
      [2mat Object.<anonymous> ([22m[0m[36msrc/app/auth.controller.spec.ts[39m[0m[2m:2:1)[22m

[0m[7m[1m[31m FAIL [39m[22m[27m[0m [0m[7m[37m auth [39m[27m[0m [2mpackages/auth/src/app/integration/[22m[1mauth.integration.spec.ts[22m
  [1m‚óè [22mTest suite failed to run

    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m5[0m:[93m24[0m - [91merror[0m[90m TS6133: [0m'UserFixture' is declared but its value is never read.

    [7m5[0m import { TestDatabase, UserFixture } from '@orion/shared/testing';
    [7m [0m [91m                       ~~~~~~~~~~~[0m
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m5[0m:[93m43[0m - [91merror[0m[90m TS2307: [0mCannot find module '@orion/shared/testing' or its corresponding type declarations.

    [7m5[0m import { TestDatabase, UserFixture } from '@orion/shared/testing';
    [7m [0m [91m                                          ~~~~~~~~~~~~~~~~~~~~~~~[0m
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m48[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m48[0m       const response = await request(app.getHttpServer())
    [7m  [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m70[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m70[0m       await request(app.getHttpServer())
    [7m  [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m95[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m95[0m       const response = await request(app.getHttpServer())
    [7m  [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m118[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m118[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m123[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m123[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m134[0m:[93m9[0m - [91merror[0m[90m TS6133: [0m'existingUser' is declared but its value is never read.

    [7m134[0m     let existingUser: any;
    [7m   [0m [91m        ~~~~~~~~~~~~[0m
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m138[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m138[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m152[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m152[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m170[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m170[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m191[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m191[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m205[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m205[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m220[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m220[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m235[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m235[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m248[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m248[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m255[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m255[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m266[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m266[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m280[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m280[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m286[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m286[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m297[0m:[93m13[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m297[0m       await request(app.getHttpServer())
    [7m   [0m [91m            ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m315[0m:[93m15[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m315[0m         await request(app.getHttpServer())
    [7m   [0m [91m              ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m324[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m324[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.
    [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m339[0m:[93m30[0m - [91merror[0m[90m TS2349: [0mThis expression is not callable.
      Type '{ default: SuperTestStatic; Test: typeof Test; agent: typeof TestAgent & ((app?: App | undefined, options?: AgentOptions | undefined) => TestAgent<...>); }' has no call signatures.

    [7m339[0m       const response = await request(app.getHttpServer())
    [7m   [0m [91m                             ~~~~~~~[0m

      [96mpackages/auth/src/app/integration/auth.integration.spec.ts[0m:[93m3[0m:[93m1[0m
        [7m3[0m import * as request from 'supertest';
        [7m [0m [96m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
        Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.

[1mTest Suites: [22m[1m[31m5 failed[39m[22m, [1m[32m2 passed[39m[22m, 7 total
[1mTests:       [22m[1m[32m40 passed[39m[22m, 40 total
[1mSnapshots:   [22m0 total
[1mTime:[22m        [1m[33m5.705 s[39m[22m
[2mRan all test suites[22m[2m.[22m
