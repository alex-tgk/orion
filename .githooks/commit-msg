#!/bin/bash
# Commit message hook - Ensures proper commit message format

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}[Commit Message Hook] Validating commit message...${NC}"

# Check if commit message follows conventional format
PATTERN="^(feat|fix|docs|style|refactor|perf|test|chore|spec|build|ci|revert)(\(.+\))?: .+"

if ! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
    echo -e "${RED}❌ Invalid commit message format!${NC}"
    echo ""
    echo "Commit message must follow the pattern:"
    echo "  <type>(<scope>): <subject>"
    echo ""
    echo "Valid types:"
    echo "  - feat:     New feature"
    echo "  - fix:      Bug fix"
    echo "  - docs:     Documentation changes"
    echo "  - style:    Code style changes (formatting, etc)"
    echo "  - refactor: Code refactoring"
    echo "  - perf:     Performance improvements"
    echo "  - test:     Test changes"
    echo "  - chore:    Build process or auxiliary tool changes"
    echo "  - spec:     Specification updates"
    echo "  - build:    Build system changes"
    echo "  - ci:       CI configuration changes"
    echo "  - revert:   Revert previous commit"
    echo ""
    echo "Examples:"
    echo "  feat(auth): add JWT refresh token support"
    echo "  fix(api): resolve memory leak in WebSocket handler"
    echo "  docs(readme): update installation instructions"
    echo ""
    echo "Your message: $COMMIT_MSG"
    exit 1
fi

# Check commit message length
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n1)
if [ ${#FIRST_LINE} -gt 100 ]; then
    echo -e "${YELLOW}⚠️  Warning: First line of commit message is too long (${#FIRST_LINE} chars, max 100)${NC}"
fi

# Auto-append spec/issue references if found in staged files
SPEC_REF=""
ISSUE_REF=""

# Look for spec references in staged files
STAGED_FILES=$(git diff --cached --name-only)
for file in $STAGED_FILES; do
    if [[ "$file" == *.md ]] && [ -f "$file" ]; then
        FOUND_SPEC=$(grep -oE "SPEC-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{3}" "$file" | head -1)
        if [ ! -z "$FOUND_SPEC" ]; then
            SPEC_REF="$FOUND_SPEC"
            break
        fi
    fi
done

# Check if references are already in the commit message
HAS_SPEC=$(echo "$COMMIT_MSG" | grep -c "Spec:")
HAS_ISSUE=$(echo "$COMMIT_MSG" | grep -c "Issue:")

# Append references if not present
if [ ! -z "$SPEC_REF" ] && [ "$HAS_SPEC" -eq 0 ]; then
    echo "" >> "$COMMIT_MSG_FILE"
    echo "Spec: $SPEC_REF" >> "$COMMIT_MSG_FILE"
    echo -e "${GREEN}✓ Added spec reference: $SPEC_REF${NC}"
fi

# Add timestamp to track commit frequency
ROOT_DIR=$(git rev-parse --show-toplevel)
COMMIT_LOG="$ROOT_DIR/.claude/logs/commits.log"
mkdir -p "$(dirname "$COMMIT_LOG")"

echo "$(date '+%Y-%m-%d %H:%M:%S') | $FIRST_LINE" >> "$COMMIT_LOG"

echo -e "${GREEN}✅ Commit message validated${NC}"
exit 0