apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
    app.kubernetes.io/part-of: istio

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
rules:
- apiGroups: [""]
  resources:
  - configmaps
  - endpoints
  - namespaces
  - nodes
  - pods
  - pods/log
  - replicationcontrollers
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups: ["apps"]
  resources:
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs:
  - get
  - list
  - watch
- apiGroups: ["batch"]
  resources:
  - cronjobs
  - jobs
  verbs:
  - get
  - list
  - watch
- apiGroups: ["networking.istio.io"]
  resources:
  - destinationrules
  - gateways
  - serviceentries
  - virtualservices
  - workloadentries
  - workloadgroups
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["security.istio.io"]
  resources:
  - authorizationpolicies
  - peerauthentications
  - requestauthentications
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - patch
- apiGroups: ["telemetry.istio.io"]
  resources:
  - telemetries
  verbs:
  - get
  - list
  - watch
- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  - networkpolicies
  verbs:
  - get
  - list
  - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali
subjects:
- kind: ServiceAccount
  name: kiali
  namespace: istio-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
data:
  config.yaml: |
    auth:
      strategy: anonymous # Change to 'token' or 'openid' for production

    deployment:
      accessible_namespaces:
      - '**' # All namespaces
      namespace: istio-system
      view_only_mode: false

    external_services:
      custom_dashboards:
        enabled: true

      istio:
        component_status:
          enabled: true
          components:
          - app_label: istiod
            is_core: true
            namespace: istio-system
          - app_label: istio-ingressgateway
            is_core: true
            namespace: istio-system
        config_map_name: istio
        istio_sidecar_injector_config_map_name: istio-sidecar-injector
        root_namespace: istio-system

      prometheus:
        url: http://prometheus-kube-prometheus-prometheus.monitoring:9090
        cache_duration: 10
        cache_enabled: true
        cache_expiration: 300

      grafana:
        enabled: true
        url: http://prometheus-grafana.monitoring:80
        in_cluster_url: http://prometheus-grafana.monitoring:80
        dashboards:
        - name: "Istio Service Dashboard"
          variables:
            namespace: "var-namespace"
            service: "var-service"
        - name: "Istio Workload Dashboard"
          variables:
            namespace: "var-namespace"
            workload: "var-workload"
        - name: "Istio Mesh Dashboard"
        - name: "Istio Control Plane Dashboard"
        - name: "Istio Performance Dashboard"

      tracing:
        enabled: true
        in_cluster_url: http://jaeger-query.istio-system:16686
        url: http://jaeger-query.istio-system:16686
        use_grpc: true
        namespace_selector: true
        query_timeout: 5
        whitelist_istio_system: ["jaeger-query", "istio-ingressgateway"]

    server:
      port: 20001
      web_root: /kiali
      web_history_mode: browser
      observability:
        metrics:
          enabled: true
          port: 9090

    istio_namespace: istio-system

    kiali_feature_flags:
      certificates_information_indicators:
        enabled: true
        secrets:
        - cacerts
        - istio-ca-secret
      clustering:
        enabled: false
      disabled_features: []
      validations:
        ignore: ["KIA1301"]

    kubernetes_config:
      cache_enabled: true
      cache_duration: 300
      burst: 200
      qps: 175

    login_token:
      signing_key: kiali-secret-key-change-in-production
      expiration_seconds: 86400

---
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 20001
    targetPort: 20001
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: kiali

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/version: v1.79.0
    app.kubernetes.io/component: observability
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: kiali
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kiali
        app.kubernetes.io/version: v1.79.0
        sidecar.istio.io/inject: "false"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: kiali
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      containers:
      - name: kiali
        image: quay.io/kiali/kiali:v1.79
        imagePullPolicy: IfNotPresent

        command:
        - /opt/kiali/kiali
        - -config
        - /kiali-configuration/config.yaml

        ports:
        - name: api-port
          containerPort: 20001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        env:
        - name: ACTIVE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_FORMAT
          value: "text"

        volumeMounts:
        - name: kiali-configuration
          mountPath: /kiali-configuration
        - name: kiali-cert
          mountPath: /kiali-cert
        - name: kiali-secret
          mountPath: /kiali-secret

        livenessProbe:
          httpGet:
            path: /kiali/healthz
            port: api-port
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /kiali/healthz
            port: api-port
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true

      volumes:
      - name: kiali-configuration
        configMap:
          name: kiali
      - name: kiali-cert
        secret:
          secretName: istio.kiali-service-account
          optional: true
      - name: kiali-secret
        secret:
          secretName: kiali-secret
          optional: true

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: kiali
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Secret
metadata:
  name: kiali-secret
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
type: Opaque
stringData:
  # Change these in production
  username: admin
  passphrase: kiali-change-me
  signing-key: kiali-secret-key-change-in-production

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - kiali.orion.example.com
    secretName: kiali-tls-cert
  rules:
  - host: kiali.orion.example.com
    http:
      paths:
      - path: /kiali(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: kiali
            port:
              number: 20001

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app.kubernetes.io/name: kiali
    app.kubernetes.io/component: observability
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kiali
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
