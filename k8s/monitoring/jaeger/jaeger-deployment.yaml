apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: tracing

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: tracing
data:
  span-storage-type: elasticsearch
  collector: |
    es:
      server-urls: http://elasticsearch:9200
      username: elastic
      password: changeme
    collector:
      zipkin:
        host-port: 9411
      grpc:
        host-port: 14250
      http:
        host-port: 14268
    sampling:
      default_strategy:
        type: probabilistic
        param: 0.1

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  type: ClusterIP
  ports:
  - name: jaeger-collector-grpc
    port: 14250
    targetPort: 14250
    protocol: TCP
  - name: jaeger-collector-http
    port: 14268
    targetPort: 14268
    protocol: TCP
  - name: jaeger-collector-zipkin
    port: 9411
    targetPort: 9411
    protocol: TCP
  - name: metrics
    port: 14269
    targetPort: 14269
    protocol: TCP
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  type: ClusterIP
  ports:
  - name: jaeger-query
    port: 16686
    targetPort: 16686
    protocol: TCP
  - name: jaeger-query-grpc
    port: 16685
    targetPort: 16685
    protocol: TCP
  - name: metrics
    port: 16687
    targetPort: 16687
    protocol: TCP
  selector:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: collector
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: collector
        sidecar.istio.io/inject: "false"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: jaeger
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      containers:
      - name: jaeger-collector
        image: jaegertracing/jaeger-collector:1.53
        imagePullPolicy: IfNotPresent

        env:
        - name: SPAN_STORAGE_TYPE
          value: memory # Change to elasticsearch for production
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: METRICS_BACKEND
          value: prometheus
        - name: LOG_LEVEL
          value: info

        ports:
        - name: grpc
          containerPort: 14250
          protocol: TCP
        - name: http
          containerPort: 14268
          protocol: TCP
        - name: zipkin
          containerPort: 9411
          protocol: TCP
        - name: admin
          containerPort: 14269
          protocol: TCP

        livenessProbe:
          httpGet:
            path: /
            port: admin
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5

        readinessProbe:
          httpGet:
            path: /
            port: admin
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5

        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: jaeger
                  app.kubernetes.io/component: collector
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: query
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jaeger
        app.kubernetes.io/component: query
        sidecar.istio.io/inject: "false"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "16687"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: jaeger
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      containers:
      - name: jaeger-query
        image: jaegertracing/jaeger-query:1.53
        imagePullPolicy: IfNotPresent

        env:
        - name: SPAN_STORAGE_TYPE
          value: memory # Change to elasticsearch for production
        - name: QUERY_BASE_PATH
          value: /jaeger
        - name: METRICS_BACKEND
          value: prometheus
        - name: LOG_LEVEL
          value: info
        - name: QUERY_UI_CONFIG
          value: /etc/jaeger/ui-config.json

        ports:
        - name: query
          containerPort: 16686
          protocol: TCP
        - name: grpc
          containerPort: 16685
          protocol: TCP
        - name: admin
          containerPort: 16687
          protocol: TCP

        livenessProbe:
          httpGet:
            path: /
            port: admin
          initialDelaySeconds: 10
          periodSeconds: 10

        readinessProbe:
          httpGet:
            path: /
            port: admin
          initialDelaySeconds: 5
          periodSeconds: 5

        volumeMounts:
        - name: ui-config
          mountPath: /etc/jaeger
          readOnly: true

        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true

      volumes:
      - name: ui-config
        configMap:
          name: jaeger-ui-config

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: jaeger
                  app.kubernetes.io/component: query
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-ui-config
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
data:
  ui-config.json: |
    {
      "dependencies": {
        "menuEnabled": true
      },
      "archiveEnabled": true,
      "tracking": {
        "gaID": "",
        "trackErrors": false
      },
      "menu": [
        {
          "label": "Grafana",
          "items": [
            {
              "label": "Service Mesh Overview",
              "url": "http://prometheus-grafana.monitoring/d/service-mesh-overview"
            },
            {
              "label": "Service Communication",
              "url": "http://prometheus-grafana.monitoring/d/service-communication"
            }
          ]
        },
        {
          "label": "Kiali",
          "url": "http://kiali.istio-system:20001/kiali"
        }
      ]
    }

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jaeger
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - jaeger.orion.example.com
    secretName: jaeger-tls-cert
  rules:
  - host: jaeger.orion.example.com
    http:
      paths:
      - path: /jaeger(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: jaeger-query
            port:
              number: 16686

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: jaeger-collector
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: collector
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: jaeger-query
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: query
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: jaeger
      app.kubernetes.io/component: query
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jaeger-collector
  namespace: istio-system
  labels:
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/component: collector
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jaeger-collector
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
