<% if (withCRUD) { %>import { Test, TestingModule } from '@nestjs/testing';
import { <%= className %>Controller } from './<%= fileName %>.controller';
import { <%= className %>Service } from '../services/<%= fileName %>.service';

describe('<%= className %>Controller', () => {
  let controller: <%= className %>Controller;
  let service: <%= className %>Service;

  const mockService = {
    create: jest.fn(),
    findAll: jest.fn(),
    findOne: jest.fn(),
    update: jest.fn(),
    remove: jest.fn(),
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [<%= className %>Controller],
      providers: [
        {
          provide: <%= className %>Service,
          useValue: mockService,
        },
      ],
    }).compile();

    controller = module.get<<%= className %>Controller>(<%= className %>Controller);
    service = module.get<<%= className %>Service>(<%= className %>Service);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  describe('create', () => {
    it('should create a <%= fileName %>', async () => {
      const createDto = { name: 'Test', description: 'Test description' };
      const expected = { id: '1', ...createDto, createdAt: new Date(), updatedAt: new Date() };

      mockService.create.mockResolvedValue(expected);

      const result = await controller.create(createDto);

      expect(result).toEqual(expected);
      expect(service.create).toHaveBeenCalledWith(createDto);
    });
  });

  describe('findAll', () => {
    it('should return paginated <%= fileName %>s', async () => {
      const expected = {
        data: [{ id: '1', name: 'Test' }],
        meta: { page: 1, limit: 10, total: 1, totalPages: 1 },
      };

      mockService.findAll.mockResolvedValue(expected);

      const result = await controller.findAll('1', '10');

      expect(result).toEqual(expected);
      expect(service.findAll).toHaveBeenCalledWith({ page: 1, limit: 10 });
    });
  });

  describe('findOne', () => {
    it('should return a single <%= fileName %>', async () => {
      const expected = { id: '1', name: 'Test' };

      mockService.findOne.mockResolvedValue(expected);

      const result = await controller.findOne('1');

      expect(result).toEqual(expected);
      expect(service.findOne).toHaveBeenCalledWith('1');
    });
  });

  describe('update', () => {
    it('should update a <%= fileName %>', async () => {
      const updateDto = { name: 'Updated' };
      const expected = { id: '1', ...updateDto };

      mockService.update.mockResolvedValue(expected);

      const result = await controller.update('1', updateDto);

      expect(result).toEqual(expected);
      expect(service.update).toHaveBeenCalledWith('1', updateDto);
    });
  });

  describe('remove', () => {
    it('should remove a <%= fileName %>', async () => {
      mockService.remove.mockResolvedValue(undefined);

      await controller.remove('1');

      expect(service.remove).toHaveBeenCalledWith('1');
    });
  });
});
<% } %>