import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication, ValidationPipe } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from '../app/app.module';

describe('<%= className %>Controller (e2e)', () => {
  let app: INestApplication;

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();

    app.setGlobalPrefix('api/<%= fileName %>');
    app.useGlobalPipes(
      new ValidationPipe({
        whitelist: true,
        forbidNonWhitelisted: true,
        transform: true,
      })
    );

    await app.init();
  });

  afterAll(async () => {
    await app.close();
  });

  describe('/api/<%= fileName %>/health (GET)', () => {
    it('should return health status', () => {
      return request(app.getHttpServer())
        .get('/api/<%= fileName %>/health')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('status', 'ok');
          expect(res.body).toHaveProperty('service', '<%= fileName %>');
        });
    });
  });
<% if (withCRUD) { %>
  describe('/api/<%= fileName %> (POST)', () => {
    it('should create a new <%= fileName %>', () => {
      return request(app.getHttpServer())
        .post('/api/<%= fileName %>')
        .send({
          name: 'E2E Test',
          description: 'E2E Test Description',
        })
        .expect(201)
        .expect((res) => {
          expect(res.body).toHaveProperty('id');
          expect(res.body.name).toBe('E2E Test');
        });
    });

    it('should reject invalid data', () => {
      return request(app.getHttpServer())
        .post('/api/<%= fileName %>')
        .send({
          name: '', // Invalid: empty name
        })
        .expect(400);
    });
  });

  describe('/api/<%= fileName %> (GET)', () => {
    it('should return paginated <%= fileName %>s', () => {
      return request(app.getHttpServer())
        .get('/api/<%= fileName %>?page=1&limit=10')
        .expect(200)
        .expect((res) => {
          expect(res.body).toHaveProperty('data');
          expect(res.body).toHaveProperty('meta');
          expect(Array.isArray(res.body.data)).toBe(true);
        });
    });
  });
<% } %>
});
