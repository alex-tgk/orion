version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: orion-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-orion}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-orion_dev}
      POSTGRES_DB: ${DB_NAME:-orion_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-orion}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orion-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: orion-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orion-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: orion-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-orion}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-orion_dev}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - orion-network

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: packages/gateway/Dockerfile
      args:
        - NODE_ENV=development
    container_name: orion-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${GATEWAY_PORT:-3000}

      # Service URLs
      AUTH_SERVICE_URL: http://auth:3001
      USER_SERVICE_URL: http://user:3002
      NOTIFICATION_SERVICE_URL: http://notifications:3003

      # Database
      DATABASE_URL: postgresql://${DB_USER:-orion}:${DB_PASSWORD:-orion_dev}@postgres:5432/${DB_NAME:-orion_dev}

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}

      # Rate Limiting
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    ports:
      - "${GATEWAY_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./packages/gateway:/app/packages/gateway:ro
      - ./packages/shared:/app/packages/shared:ro
    networks:
      - orion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service
  auth:
    build:
      context: .
      dockerfile: packages/auth/Dockerfile
      args:
        - NODE_ENV=development
    container_name: orion-auth
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${AUTH_PORT:-3001}

      # Database
      DATABASE_URL: postgresql://${DB_USER:-orion}:${DB_PASSWORD:-orion_dev}@postgres:5432/${DB_NAME:-orion_dev}

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}

      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY:-15m}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}

      # Rate Limiting
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    ports:
      - "${AUTH_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./packages/auth:/app/packages/auth:ro
      - ./packages/shared:/app/packages/shared:ro
    networks:
      - orion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/auth/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user:
    build:
      context: .
      dockerfile: packages/user/Dockerfile
      args:
        - NODE_ENV=development
    container_name: orion-user
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${USER_PORT:-3002}

      # Database
      DATABASE_URL: postgresql://${DB_USER:-orion}:${DB_PASSWORD:-orion_dev}@postgres:5432/${DB_NAME:-orion_dev}

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}

      # RabbitMQ
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-orion}:${RABBITMQ_PASSWORD:-orion_dev}@rabbitmq:5672

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}

      # Rate Limiting
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    ports:
      - "${USER_PORT:-3002}:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./packages/user:/app/packages/user:ro
      - ./packages/shared:/app/packages/shared:ro
      - user_uploads:/app/uploads
    networks:
      - orion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/api/user/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notifications:
    build:
      context: .
      dockerfile: packages/notifications/Dockerfile
      args:
        - NODE_ENV=development
    container_name: orion-notifications
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${NOTIFICATION_PORT:-3003}

      # Database
      DATABASE_URL: postgresql://${DB_USER:-orion}:${DB_PASSWORD:-orion_dev}@postgres:5432/${DB_NAME:-orion_dev}

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}

      # RabbitMQ
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-orion}:${RABBITMQ_PASSWORD:-orion_dev}@rabbitmq:5672

      # Email Configuration
      SMTP_HOST: ${SMTP_HOST:-smtp.mailtrap.io}
      SMTP_PORT: ${SMTP_PORT:-2525}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@orion.dev}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}

      # Rate Limiting
      RATE_LIMIT_TTL: ${RATE_LIMIT_TTL:-60}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
    ports:
      - "${NOTIFICATION_PORT:-3003}:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./packages/notifications:/app/packages/notifications:ro
      - ./packages/shared:/app/packages/shared:ro
    networks:
      - orion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/api/v1/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Wrapper Service
  ai-wrapper:
    build:
      context: .
      dockerfile: packages/ai-wrapper/Dockerfile
      args:
        - NODE_ENV=development
    container_name: orion-ai-wrapper
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${AI_WRAPPER_PORT:-3200}

      # CLI tool paths (optional)
      CLAUDE_CLI_PATH: ${CLAUDE_CLI_PATH:-}
      COPILOT_CLI_PATH: ${COPILOT_CLI_PATH:-}
      AMAZONQ_CLI_PATH: ${AMAZONQ_CLI_PATH:-}

      # Execution settings
      AI_EXECUTION_TIMEOUT: ${AI_EXECUTION_TIMEOUT:-120000}
      AI_MAX_PARALLEL_REQUESTS: ${AI_MAX_PARALLEL_REQUESTS:-5}
      AI_RETRY_ATTEMPTS: ${AI_RETRY_ATTEMPTS:-2}

      # Caching
      AI_CACHE_ENABLED: ${AI_CACHE_ENABLED:-true}
      AI_CACHE_TTL: ${AI_CACHE_TTL:-3600}

      # Redis for caching
      REDIS_URL: redis://redis:6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}
    ports:
      - "${AI_WRAPPER_PORT:-3200}:3200"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./packages/ai-wrapper:/app/packages/ai-wrapper:ro
      - ./packages/shared:/app/packages/shared:ro
    networks:
      - orion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3200/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Admin UI Service
  admin-ui:
    build:
      context: .
      dockerfile: packages/admin-ui/Dockerfile
      args:
        - NODE_ENV=development
    container_name: orion-admin-ui
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${ADMIN_UI_PORT:-3004}

      # Service URLs
      GATEWAY_URL: http://gateway:3000
      AUTH_SERVICE_URL: http://auth:3001
      USER_SERVICE_URL: http://user:3002
      NOTIFICATION_SERVICE_URL: http://notifications:3003
      AI_WRAPPER_URL: http://ai-wrapper:3200

      # Database (if needed)
      DATABASE_URL: postgresql://${DB_USER:-orion}:${DB_PASSWORD:-orion_dev}@postgres:5432/${DB_NAME:-orion_dev}

      # Redis
      REDIS_URL: redis://redis:6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}

      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4200}
    ports:
      - "${ADMIN_UI_PORT:-3004}:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      gateway:
        condition: service_healthy
    volumes:
      - ./packages/admin-ui:/app/packages/admin-ui:ro
      - ./packages/shared:/app/packages/shared:ro
    networks:
      - orion-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)}).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: orion-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - orion-network
    profiles:
      - tools

  # Redis Commander - Redis Management UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: orion-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - orion-network
    profiles:
      - tools

networks:
  orion-network:
    driver: bridge
    name: orion-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  user_uploads:
    driver: local
