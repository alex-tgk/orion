// User Service Database Schema
// Production-grade schema for comprehensive user management

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/user"
}

datasource db {
  provider = "postgresql"
  url      = env("USER_DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum DeviceType {
  WEB
  MOBILE_IOS
  MOBILE_ANDROID
  DESKTOP
  TABLET
  UNKNOWN
}

enum RoleType {
  ADMIN
  USER
  MODERATOR
  GUEST
}

// ============================================================================
// USER MODEL
// ============================================================================

model User {
  id          String    @id @default(uuid()) @db.Uuid
  email       String    @unique @db.VarChar(255)
  name        String    @db.VarChar(100)
  password    String?   @db.VarChar(255) // Optional for OAuth users

  // Profile fields
  avatar      String?   @db.VarChar(500)
  bio         String?   @db.Text
  location    String?   @db.VarChar(100)
  website     String?   @db.VarChar(500)

  // Status
  isActive    Boolean   @default(true) @map("is_active")
  isVerified  Boolean   @default(false) @map("is_verified")
  isSuspended Boolean   @default(false) @map("is_suspended")

  // Activity tracking
  lastLoginAt DateTime? @map("last_login_at") @db.Timestamptz
  lastActiveAt DateTime? @map("last_active_at") @db.Timestamptz

  // Security
  passwordChangedAt DateTime? @map("password_changed_at") @db.Timestamptz
  failedLoginAttempts Int     @default(0) @map("failed_login_attempts")
  lockedUntil        DateTime? @map("locked_until") @db.Timestamptz

  // Audit fields
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz

  // Metadata
  metadata    Json      @default("{}") @db.JsonB

  // Relations
  preferences  UserPreferences?
  sessions     Session[]
  userRoles    UserRole[]
  userPermissions UserPermission[]

  @@index([email])
  @@index([isActive])
  @@index([isVerified])
  @@index([deletedAt])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@map("users")
}

// ============================================================================
// USER PREFERENCES MODEL
// ============================================================================

model UserPreferences {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification preferences
  notifications Json   @default("{}") @db.JsonB

  // Privacy settings
  privacy      Json   @default("{}") @db.JsonB

  // Display preferences
  display      Json   @default("{}") @db.JsonB

  // Locale and timezone
  locale       String @default("en") @db.VarChar(10)
  timezone     String @default("UTC") @db.VarChar(50)

  // Metadata
  metadata     Json   @default("{}") @db.JsonB

  // Audit fields
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@index([userId])
  @@map("user_preferences")
}

// ============================================================================
// SESSION MODEL
// ============================================================================

model Session {
  id              String     @id @default(uuid()) @db.Uuid
  userId          String     @db.Uuid @map("user_id")
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Token information
  token           String     @unique @db.VarChar(500)
  refreshToken    String     @unique @map("refresh_token") @db.VarChar(500)

  // Device information
  deviceName      String?    @map("device_name") @db.VarChar(100)
  deviceType      String?    @map("device_type") @db.VarChar(50)
  ipAddress       String?    @map("ip_address") @db.VarChar(45)
  userAgent       String?    @map("user_agent") @db.Text

  // Session status
  isActive        Boolean    @default(true) @map("is_active")
  lastActivityAt  DateTime   @default(now()) @map("last_activity_at") @db.Timestamptz
  expiresAt       DateTime   @map("expires_at") @db.Timestamptz

  // Audit fields
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime   @updatedAt @map("updated_at") @db.Timestamptz

  // Metadata
  metadata        Json       @default("{}") @db.JsonB

  @@index([userId])
  @@index([token])
  @@index([refreshToken])
  @@index([isActive])
  @@index([expiresAt])
  @@index([userId, isActive])
  @@map("sessions")
}

// ============================================================================
// RBAC MODELS - Role-Based Access Control
// ============================================================================

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(50)
  displayName String   @map("display_name") @db.VarChar(100)
  description String?  @db.Text

  // Status
  isSystem    Boolean  @default(false) @map("is_system")
  isActive    Boolean  @default(true) @map("is_active")

  // Metadata
  metadata    Json     @default("{}") @db.JsonB

  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  userRoles    UserRole[]
  permissions  RolePermission[]

  @@index([name])
  @@index([isActive])
  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique @db.VarChar(100)
  displayName String   @map("display_name") @db.VarChar(100)
  description String?  @db.Text
  resource    String   @db.VarChar(100)
  action      String   @db.VarChar(50)

  // Grouping
  category    String?  @db.VarChar(50)

  // Status
  isActive    Boolean  @default(true) @map("is_active")

  // Metadata
  metadata    Json     @default("{}") @db.JsonB

  // Audit fields
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@index([name])
  @@index([resource])
  @@index([action])
  @@index([category])
  @@map("permissions")
}

// ============================================================================
// JUNCTION TABLES
// ============================================================================

model UserRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid @map("user_id")
  roleId    String   @db.Uuid @map("role_id")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  // Metadata
  assignedBy String? @map("assigned_by") @db.Uuid
  metadata   Json    @default("{}") @db.JsonB

  // Audit fields
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(uuid()) @db.Uuid
  roleId       String     @db.Uuid @map("role_id")
  permissionId String     @db.Uuid @map("permission_id")

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Metadata
  metadata     Json       @default("{}") @db.JsonB

  // Audit fields
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(uuid()) @db.Uuid
  userId       String     @db.Uuid @map("user_id")
  permissionId String     @db.Uuid @map("permission_id")

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Metadata
  assignedBy   String?    @map("assigned_by") @db.Uuid
  metadata     Json       @default("{}") @db.JsonB

  // Audit fields
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@map("user_permissions")
}
