// AI Interface Service Database Schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// AI Request tracking and analytics
model AIRequest {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")

  // Request details
  provider  String   // 'openai', 'anthropic'
  model     String   // 'gpt-4', 'gpt-3.5-turbo', 'claude-3-sonnet'
  prompt    String   @db.Text
  response  String?  @db.Text

  // Token usage and cost
  promptTokens    Int      @default(0) @map("prompt_tokens")
  completionTokens Int     @default(0) @map("completion_tokens")
  totalTokens     Int      @default(0) @map("total_tokens")
  cost            Decimal  @default(0) @db.Decimal(10, 6)

  // Metadata
  parameters      Json?    // Temperature, max_tokens, etc.
  cached          Boolean  @default(false)
  streamEnabled   Boolean  @default(false) @map("stream_enabled")
  durationMs      Int?     @map("duration_ms")

  // Status and error handling
  status          String   @default("pending") // 'pending', 'completed', 'failed'
  errorMessage    String?  @map("error_message") @db.Text

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId, createdAt])
  @@index([provider, model])
  @@index([status])
  @@map("ai_requests")
}

// Prompt templates with versioning
model Prompt {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text

  // Template content
  template    String   @db.Text
  version     Int      @default(1)

  // Parameters for the template
  parameters  Json?    // Expected variables: { "name": { "type": "string", "required": true } }

  // Default AI settings
  provider    String   @default("openai")
  model       String   @default("gpt-3.5-turbo")
  temperature Decimal? @db.Decimal(3, 2)
  maxTokens   Int?     @map("max_tokens")

  // Versioning and status
  active      Boolean  @default(true)
  createdBy   String?  @map("created_by")

  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([name, version])
  @@index([active])
  @@map("prompts")
}

// Conversation management for multi-turn interactions
model Conversation {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")

  // Conversation metadata
  title        String?
  provider     String   @default("openai")
  model        String   @default("gpt-3.5-turbo")

  // Messages array stored as JSON
  messages     Json     // Array of { role: 'user' | 'assistant' | 'system', content: string }

  // Context and settings
  systemPrompt String?  @map("system_prompt") @db.Text
  parameters   Json?    // Temperature, max_tokens, etc.

  // Analytics
  messageCount Int      @default(0) @map("message_count")
  totalTokens  Int      @default(0) @map("total_tokens")
  totalCost    Decimal  @default(0) @map("total_cost") @db.Decimal(10, 6)

  // Status
  active       Boolean  @default(true)

  // Timestamps
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  lastMessageAt DateTime? @map("last_message_at")

  @@index([userId, active])
  @@index([createdAt])
  @@map("conversations")
}

// Embeddings cache for vector operations
model Embedding {
  id        String   @id @default(uuid())

  // Content reference
  content   String   @db.Text
  contentHash String @unique @map("content_hash") // SHA-256 hash of content

  // Embedding details
  provider  String   @default("openai")
  model     String   @default("text-embedding-ada-002")
  vector    Json     // Array of floats
  dimensions Int     @default(1536)

  // Metadata
  userId    String?  @map("user_id")
  metadata  Json?    // Custom metadata for filtering

  // Analytics
  tokens    Int      @default(0)
  cost      Decimal  @default(0) @db.Decimal(10, 6)

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([contentHash])
  @@index([userId])
  @@map("embeddings")
}
