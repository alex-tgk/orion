// Auth Service Database Schema
// Production-grade schema for authentication and security

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/auth"
}

datasource db {
  provider = "postgresql"
  url      = env("AUTH_DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  EMAIL_VERIFICATION
  MAGIC_LINK
  API_KEY
}

enum TokenStatus {
  ACTIVE
  EXPIRED
  REVOKED
  USED
}

enum LoginAttemptStatus {
  SUCCESS
  FAILED
  BLOCKED
  SUSPICIOUS
}

enum DeviceStatus {
  TRUSTED
  UNTRUSTED
  BLOCKED
  PENDING_VERIFICATION
}

enum TwoFactorMethod {
  TOTP          // Time-based One-Time Password (Google Authenticator, etc.)
  SMS           // SMS verification code
  EMAIL         // Email verification code
  BACKUP_CODE   // Backup recovery codes
  HARDWARE_KEY  // Hardware security key (YubiKey, etc.)
}

// ============================================================================
// AUTHENTICATION TOKENS
// ============================================================================

model AuthToken {
  id        String      @id @default(uuid()) @db.Uuid
  userId    String      @map("user_id") @db.Uuid

  // Token information
  token     String      @unique @db.VarChar(500)
  tokenHash String      @unique @map("token_hash") @db.VarChar(128) // SHA-256 hash
  type      TokenType
  status    TokenStatus @default(ACTIVE)

  // Token metadata
  scope     String[]    @default([])
  audience  String?     @db.VarChar(255)
  issuer    String?     @db.VarChar(255)

  // Refresh token rotation
  refreshCount    Int     @default(0) @map("refresh_count")
  parentTokenId   String? @map("parent_token_id") @db.Uuid
  rotatedFromId   String? @map("rotated_from_id") @db.Uuid

  // Device and location
  deviceId    String?   @map("device_id") @db.Uuid
  ipAddress   String?   @map("ip_address") @db.VarChar(45)
  userAgent   String?   @map("user_agent") @db.Text
  location    Json?     @db.JsonB

  // Timing
  issuedAt    DateTime  @default(now()) @map("issued_at") @db.Timestamptz
  expiresAt   DateTime  @map("expires_at") @db.Timestamptz
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamptz
  revokedAt   DateTime? @map("revoked_at") @db.Timestamptz

  // Usage tracking
  usageCount  Int       @default(0) @map("usage_count")

  // Metadata
  metadata    Json      @default("{}") @db.JsonB

  @@index([userId])
  @@index([token])
  @@index([tokenHash])
  @@index([type])
  @@index([status])
  @@index([expiresAt])
  @@index([deviceId])
  @@index([parentTokenId])
  @@index([userId, type, status]) // Composite for user token queries
  @@map("auth_tokens")
}

// ============================================================================
// LOGIN ATTEMPTS (Security Monitoring)
// ============================================================================

model LoginAttempt {
  id        String             @id @default(uuid()) @db.Uuid
  userId    String?            @map("user_id") @db.Uuid
  email     String             @db.VarChar(255)

  // Attempt details
  status    LoginAttemptStatus
  method    String             @db.VarChar(50) // password, magic_link, social, etc.

  // Device and location
  ipAddress String             @map("ip_address") @db.VarChar(45)
  userAgent String?            @map("user_agent") @db.Text
  deviceId  String?            @map("device_id") @db.Uuid

  // Geolocation
  country   String?            @db.VarChar(100)
  city      String?            @db.VarChar(100)
  region    String?            @db.VarChar(100)
  location  Json?              @db.JsonB

  // Security flags
  isSuspicious Boolean          @default(false) @map("is_suspicious")
  isBlocked    Boolean          @default(false) @map("is_blocked")
  riskScore    Int?             @map("risk_score") // 0-100

  // Failure details
  failureReason String?         @map("failure_reason") @db.VarChar(255)
  errorMessage  String?         @map("error_message") @db.Text

  // Two-factor authentication
  twoFactorUsed    Boolean?     @map("two_factor_used")
  twoFactorMethod  TwoFactorMethod? @map("two_factor_method")

  // Metadata
  metadata  Json               @default("{}") @db.JsonB

  // Timing
  attemptedAt DateTime         @default(now()) @map("attempted_at") @db.Timestamptz
  duration    Int?             // milliseconds

  @@index([userId])
  @@index([email])
  @@index([status])
  @@index([ipAddress])
  @@index([attemptedAt])
  @@index([isSuspicious])
  @@index([isBlocked])
  @@index([deviceId])
  @@index([email, status, attemptedAt]) // Composite for security analysis
  @@index([ipAddress, attemptedAt]) // Composite for IP-based rate limiting
  @@map("login_attempts")
}

// ============================================================================
// PASSWORD RESET
// ============================================================================

model PasswordReset {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  email     String    @db.VarChar(255)

  // Token information
  token     String    @unique @db.VarChar(128)
  tokenHash String    @unique @map("token_hash") @db.VarChar(128)

  // Request details
  ipAddress String    @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent") @db.Text

  // Status
  isUsed    Boolean   @default(false) @map("is_used")
  usedAt    DateTime? @map("used_at") @db.Timestamptz

  // Timing
  requestedAt DateTime @default(now()) @map("requested_at") @db.Timestamptz
  expiresAt   DateTime @map("expires_at") @db.Timestamptz

  // Security
  attemptsCount Int    @default(0) @map("attempts_count")
  maxAttempts   Int    @default(5) @map("max_attempts")

  // Metadata
  metadata    Json     @default("{}") @db.JsonB

  @@index([userId])
  @@index([email])
  @@index([token])
  @@index([tokenHash])
  @@index([expiresAt])
  @@index([isUsed])
  @@map("password_resets")
}

// ============================================================================
// TWO-FACTOR AUTHENTICATION
// ============================================================================

model TwoFactorAuth {
  id        String          @id @default(uuid()) @db.Uuid
  userId    String          @unique @map("user_id") @db.Uuid

  // Primary method configuration
  primaryMethod TwoFactorMethod? @map("primary_method")
  isEnabled     Boolean          @default(false) @map("is_enabled")

  // TOTP configuration
  totpSecret    String?     @map("totp_secret") @db.VarChar(255) // Encrypted
  totpVerified  Boolean     @default(false) @map("totp_verified")

  // SMS configuration
  smsPhone      String?     @map("sms_phone") @db.VarChar(20)
  smsVerified   Boolean     @default(false) @map("sms_verified")

  // Email configuration
  emailVerified Boolean     @default(false) @map("email_verified")

  // Backup codes (encrypted)
  backupCodes   String[]    @map("backup_codes")
  backupCodesGeneratedAt DateTime? @map("backup_codes_generated_at") @db.Timestamptz

  // Recovery settings
  recoveryEmail String?    @map("recovery_email") @db.VarChar(255)
  recoveryPhone String?    @map("recovery_phone") @db.VarChar(20)

  // Trusted devices
  trustedDevices Json      @default("[]") @map("trusted_devices") @db.JsonB

  // Usage tracking
  lastUsedAt    DateTime?  @map("last_used_at") @db.Timestamptz
  lastUsedMethod TwoFactorMethod? @map("last_used_method")

  // Metadata
  metadata      Json       @default("{}") @db.JsonB

  // Audit fields
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime   @updatedAt @map("updated_at") @db.Timestamptz

  @@index([userId])
  @@index([isEnabled])
  @@map("two_factor_auth")
}

model TwoFactorBackupCode {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid

  // Code information
  code      String    @unique @db.VarChar(20)
  codeHash  String    @unique @map("code_hash") @db.VarChar(128)

  // Status
  isUsed    Boolean   @default(false) @map("is_used")
  usedAt    DateTime? @map("used_at") @db.Timestamptz

  // Context when used
  ipAddress String?   @map("ip_address") @db.VarChar(45)
  userAgent String?   @map("user_agent") @db.Text

  // Timing
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  expiresAt DateTime? @map("expires_at") @db.Timestamptz

  @@index([userId])
  @@index([code])
  @@index([codeHash])
  @@index([isUsed])
  @@map("two_factor_backup_codes")
}

// ============================================================================
// DEVICE MANAGEMENT
// ============================================================================

model Device {
  id        String       @id @default(uuid()) @db.Uuid
  userId    String       @map("user_id") @db.Uuid

  // Device identification
  deviceId       String   @unique @map("device_id") @db.VarChar(255)
  fingerprint    String   @map("fingerprint") @db.VarChar(255)

  // Device information
  name           String?  @db.VarChar(255)
  type           String?  @db.VarChar(50) // mobile, desktop, tablet, etc.
  os             String?  @db.VarChar(100)
  osVersion      String?  @map("os_version") @db.VarChar(50)
  browser        String?  @db.VarChar(100)
  browserVersion String?  @map("browser_version") @db.VarChar(50)

  // Status
  status         DeviceStatus @default(UNTRUSTED)
  isTrusted      Boolean      @default(false) @map("is_trusted")
  isBlocked      Boolean      @default(false) @map("is_blocked")

  // Location tracking
  lastIpAddress  String?      @map("last_ip_address") @db.VarChar(45)
  lastCountry    String?      @map("last_country") @db.VarChar(100)
  lastCity       String?      @map("last_city") @db.VarChar(100)
  lastLocation   Json?        @map("last_location") @db.JsonB

  // Activity tracking
  firstSeenAt    DateTime     @default(now()) @map("first_seen_at") @db.Timestamptz
  lastSeenAt     DateTime     @default(now()) @map("last_seen_at") @db.Timestamptz
  loginCount     Int          @default(0) @map("login_count")

  // Trust verification
  verifiedAt     DateTime?    @map("verified_at") @db.Timestamptz
  trustExpiresAt DateTime?    @map("trust_expires_at") @db.Timestamptz

  // Metadata
  userAgent      String?      @map("user_agent") @db.Text
  metadata       Json         @default("{}") @db.JsonB

  @@index([userId])
  @@index([deviceId])
  @@index([fingerprint])
  @@index([status])
  @@index([isTrusted])
  @@index([lastSeenAt])
  @@index([userId, isTrusted]) // Composite for trusted device queries
  @@map("devices")
}

// ============================================================================
// SESSION BLACKLIST (For immediate token revocation)
// ============================================================================

model SessionBlacklist {
  id        String   @id @default(uuid()) @db.Uuid

  // Token identification
  tokenHash String   @unique @map("token_hash") @db.VarChar(128)
  userId    String?  @map("user_id") @db.Uuid

  // Revocation details
  reason    String?  @db.VarChar(255)
  revokedBy String?  @map("revoked_by") @db.Uuid

  // Timing
  revokedAt DateTime @default(now()) @map("revoked_at") @db.Timestamptz
  expiresAt DateTime @map("expires_at") @db.Timestamptz // Cleanup after token expiry

  // Metadata
  metadata  Json     @default("{}") @db.JsonB

  @@index([tokenHash])
  @@index([userId])
  @@index([expiresAt])
  @@map("session_blacklist")
}

// ============================================================================
// OAUTH / SOCIAL LOGIN
// ============================================================================

model OAuthProvider {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid

  // Provider information
  provider         String   @db.VarChar(50) // google, github, facebook, etc.
  providerId       String   @map("provider_id") @db.VarChar(255)
  providerEmail    String?  @map("provider_email") @db.VarChar(255)

  // Tokens (encrypted)
  accessToken      String?  @map("access_token") @db.Text
  refreshToken     String?  @map("refresh_token") @db.Text
  tokenExpiresAt   DateTime? @map("token_expires_at") @db.Timestamptz

  // Profile data
  profile          Json     @default("{}") @db.JsonB

  // Status
  isActive         Boolean  @default(true) @map("is_active")
  isPrimary        Boolean  @default(false) @map("is_primary")

  // Metadata
  metadata         Json     @default("{}") @db.JsonB

  // Audit fields
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz
  lastUsedAt       DateTime? @map("last_used_at") @db.Timestamptz

  @@unique([provider, providerId])
  @@index([userId])
  @@index([provider])
  @@index([providerEmail])
  @@index([isActive])
  @@map("oauth_providers")
}

// ============================================================================
// SECURITY EVENTS (Audit Trail)
// ============================================================================

model SecurityEvent {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid

  // Event details
  eventType    String   @map("event_type") @db.VarChar(100)
  eventCategory String  @map("event_category") @db.VarChar(50) // auth, security, account
  severity     String   @db.VarChar(20) // low, medium, high, critical

  // Event description
  title        String   @db.VarChar(255)
  description  String   @db.Text
  details      Json     @default("{}") @db.JsonB

  // Context
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  userAgent    String?  @map("user_agent") @db.Text
  deviceId     String?  @map("device_id") @db.Uuid
  sessionId    String?  @map("session_id") @db.Uuid

  // Location
  country      String?  @db.VarChar(100)
  city         String?  @db.VarChar(100)
  location     Json?    @db.JsonB

  // Outcome
  wasBlocked   Boolean  @default(false) @map("was_blocked")
  wasNotified  Boolean  @default(false) @map("was_notified")

  // Metadata
  metadata     Json     @default("{}") @db.JsonB
  tags         String[] @default([])

  // Timing
  occurredAt   DateTime @default(now()) @map("occurred_at") @db.Timestamptz

  @@index([userId])
  @@index([eventType])
  @@index([eventCategory])
  @@index([severity])
  @@index([occurredAt])
  @@index([deviceId])
  @@index([ipAddress])
  @@index([tags])
  @@index([userId, eventType, occurredAt]) // Composite for user security timeline
  @@map("security_events")
}

// ============================================================================
// RATE LIMITING (Per User/IP)
// ============================================================================

model RateLimit {
  id        String   @id @default(uuid()) @db.Uuid

  // Identifier (userId, IP, or custom key)
  key       String   @unique @db.VarChar(255)
  keyType   String   @map("key_type") @db.VarChar(50) // user, ip, api_key, etc.

  // Limit configuration
  endpoint  String   @db.VarChar(255)
  limit     Int      // Maximum requests
  window    Int      // Time window in seconds

  // Current state
  count     Int      @default(0)
  resetAt   DateTime @map("reset_at") @db.Timestamptz

  // Blocking
  isBlocked Boolean  @default(false) @map("is_blocked")
  blockedUntil DateTime? @map("blocked_until") @db.Timestamptz

  // Metadata
  metadata  Json     @default("{}") @db.JsonB

  // Timing
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  @@index([key])
  @@index([keyType])
  @@index([endpoint])
  @@index([resetAt])
  @@index([isBlocked])
  @@map("rate_limits")
}
